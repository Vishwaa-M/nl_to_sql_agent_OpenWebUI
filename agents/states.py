import operator
from typing import Annotated, List, Optional, TypedDict, Dict, Any

from langchain_core.messages import BaseMessage

class AgentState(TypedDict):
    """
    Defines the complete, robust state for the Text-to-SQL agent.
    This state is passed between and mutated by the nodes in the LangGraph.
    """
    
    question: str
    """The most recent natural language query from the user."""

    chat_history: Annotated[List[BaseMessage], operator.add]
    """
    The full history of the conversation, including user, AI, and system messages.
    The `Annotated` type with `operator.add` tells LangGraph to append messages
    to this list rather than overwriting it, correctly managing the conversation flow.
    """

    user_id: str
    """A unique identifier for the current user, essential for personalized memory."""


    next_node: Optional[str]
    """The next node to execute, determined by a router or conditional edge."""


    retrieved_schema: Optional[str]
    """
    A string containing the relevant, filtered database schema (e.g., CREATE TABLE statements)
    retrieved from the vector store by the schema_linking_node.
    """

    few_shot_examples: Optional[str]
    """
    A string containing dynamically retrieved (question, SQL) pairs from the vector store
    to be used for in-context learning by the query_generation_node.
    """

    generated_sql: Optional[str]
    """
    The SQL query generated by the LLM. This can be updated by the query_generation_node
    or the self_correction_node.
    """

    query_result: Optional[List[Dict[str, Any]]]
    """
    The structured data (a list of row dictionaries) returned from a successful
    SQL query execution by the query_execution_node.
    """

    sql_error: Optional[str]
    """
    The specific error message returned from the database if a query fails.
    This is captured by the query_execution_node and used by the self_correction_node.
    """

    error: Optional[str]
    """A general error field to capture any unexpected issues within a node."""

    summary: Optional[str]
    """
    The natural language summary of the query result, generated by the
    summarization_node.
    """

    visualization_plan: Optional[Dict[str, Any]]
    """
    A structured JSON plan for generating visualizations, created by the 
    `plan_visualizations` tool. This plan can define multiple charts.
    """

    plotly_figure_json: Optional[List[str]]
    """
    A list of Plotly Figure objects serialized to JSON strings. This ensures
    the agent state is fully serializable for the checkpointer. The UI layer
    is responsible for parsing these strings back into figures for rendering.
    """

    long_term_memory: Optional[str]
    """
    Context string loaded from the vector store at the start of a conversation,
    containing relevant facts about the user.
    """

    facts_to_save: Optional[List[str]]
    """
    A list of new, curated facts extracted from the current conversation that
    are deemed important enough to save for future interactions.
    """
